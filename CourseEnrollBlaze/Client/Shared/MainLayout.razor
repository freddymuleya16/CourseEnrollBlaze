@inherits LayoutComponentBase
@inject HttpClient httpClient
@inject AuthenticationStateProvider authStateProvider
@inject NavigationManager navigationManager
@inject IJSRuntime js
@implements IAsyncDisposable

@code {
    private bool collapseNavMenu = false;

    private string? NavMenuCssClass => collapseNavMenu ? "d-none" : null;
    private string? MainMenuCssClass => collapseNavMenu ? null : "g-sidenav-pinned";

    private void toggleSidenav()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    private async Task Logout()
    {
        var customAuthStateProvider = (CustomAuthenticationState)authStateProvider;
        await customAuthStateProvider.UpdateAuthenticationState(null);
        navigationManager.NavigateTo("/");

    }

    private string GetBreadcrumb()
    {
        var currentUrl = navigationManager.Uri.Substring(navigationManager.Uri.LastIndexOf("/"));
        switch (currentUrl)
        {
            case "/about":
                return "About Us";
            case "/counter":
                return "Counter";
            case "/enrollment":
                return "Enrollment";
            case "/fetchdata":
                return "Fetch Data";
            case "/":
                return "Home";
            case "/instructor-courses":
                return "Instructor Courses";
            case "/mycourses":
                return "My Courses";
            default:
                return "Unknown";
        }
    }
}
<main class="@MainMenuCssClass g-sidenav-show  bg-gray-100 min-vh-100">
    <AuthorizeView>
        <Authorized>
            <NavMenu NavMenuCssClass="@NavMenuCssClass" />
        </Authorized>
    </AuthorizeView>
    <main class="main-content border-radius-lg ">
        <nav class="navbar navbar-main navbar-expand-lg px-0 mx-4 shadow-none border-radius-xl" id="navbarBlur"
             data-scroll="true">
            <div class="container-fluid py-1 px-3">
                <nav aria-label="breadcrumb">

                    <ol class="breadcrumb bg-transparent mb-0 pb-0 pt-1 px-0 me-sm-6 me-5">
                        <li class="breadcrumb-item text-sm"><a class="opacity-5 text-dark" href="/">Blaze</a></li>
                        <li class="breadcrumb-item text-sm text-dark active" aria-current="page">@GetBreadcrumb()</li>
                    </ol>
                    <h6 class="font-weight-bolder mb-0">@GetBreadcrumb()</h6>

                </nav>
                <div class="collapse navbar-collapse mt-sm-0 mt-2 me-md-0 me-sm-4" id="navbar">
                    <div class="ms-md-auto pe-md-3 d-flex align-items-center">
                    </div>
                    <ul class="navbar-nav  justify-content-end">
                        <AuthorizeView>
                            <Authorized>
                                <li class="nav-item d-xl-none ps-3 d-flex align-items-center">
                                    <a href="javascript:;" class="nav-link text-body p-0 me-2" id="iconNavbarSidenav" @onclick="toggleSidenav">
                                        <div class="sidenav-toggler-inner">
                                            <i class="sidenav-toggler-line"></i>
                                            <i class="sidenav-toggler-line"></i>
                                            <i class="sidenav-toggler-line"></i>
                                        </div>
                                    </a>
                                </li>
                                @if (_notifications.Length > 0)
                                {
                                    <li class="nav-item dropdown pe-2 d-flex align-items-center">
                                        <a href="javascript:;" class="nav-link text-body p-0" id="dropdownMenuButton" data-bs-toggle="dropdown"
                                           aria-expanded="false">
                                            <i class="fa fa-bell cursor-pointer"></i>
                                        </a>

                                        <ul class="dropdown-menu  dropdown-menu-end  px-2 py-3 me-sm-n4" aria-labelledby="dropdownMenuButton">
                                            @foreach (var notification in _notifications)
                                            {
                                                <li class="mb-2">
                                                    <a class="dropdown-item border-radius-md" href="javascript:;">
                                                        <div class="d-flex py-1">
                                                            <div class="align-items-center avatar avatar-sm bg-primary d-flex justify-content-center me-3 my-auto">
                                                                <span class="material-icons">
                                                                    notifications_active
                                                                </span>
                                                            </div>
                                                            <div class="d-flex flex-column justify-content-center">
                                                                <h6 class="text-sm font-weight-normal mb-1">
                                                                    <span class="font-weight-bold">@notification.Title</span> @notification.Message
                                                                </h6>
                                                                <p class="text-xs text-secondary mb-0">
                                                                    <i class="fa fa-clock me-1"></i>
                                                                    @notification.TimeSinceStr
                                                                </p>
                                                            </div>
                                                        </div>
                                                    </a>
                                                </li>

                                            }
                                        </ul>
                                    </li>

                                }
                                <li class="nav-item px-2 d-flex align-items-center">
                                    <a href="#" @onclick="Logout" class="nav-link text-body font-weight-bold px-0">
                                        <i class="fa fa-sign-out-alt"></i>
                                        <span class="d-sm-inline d-none me-sm-1">Sign Out</span>
                                    </a>
                                </li>
                            </Authorized>
                            <NotAuthorized>
                                <li class="nav-item px-2 d-flex align-items-center">
                                    <a href="/login" class="nav-link text-body font-weight-bold px-0">
                                        <i class="fa fa-user me-sm-1"></i>
                                        <span class="d-sm-inline d-none">Sign In</span>
                                    </a>
                                </li>
                            </NotAuthorized>
                        </AuthorizeView>

                    </ul>
                </div>
            </div>
        </nav>
        <div class="container-fluid py-4">
            @Body
        </div>
    </main>

    @code {
        private HubConnection? _hubConnection;
        private Notification[] _notifications = Array.Empty<Notification>();


        protected override async Task OnInitializedAsync()
        {
             
            var customAuthStateProvider = (CustomAuthenticationState)authStateProvider;
            var authState = await customAuthStateProvider.GetAuthenticationStateAsync();
            if (!authState.User.Identity.IsAuthenticated)
            {
                return;
            }

            var tokenResult = await customAuthStateProvider.GetTokenAsync();
            if (tokenResult == null)
            {
                return;
            }
            var baseUrl = navigationManager.BaseUri;
            var hubUrl = $"{baseUrl}notifications";
            await js.InvokeVoidAsync("eval", @"
                            window.blazorConsoleLog = function(message) {
                            console.log(message);
                            };
                            ");

            await LogToConsole("Hello from Blazor!: "+hubUrl);
            _hubConnection = new HubConnectionBuilder()
            .WithUrl(hubUrl, o => o.AccessTokenProvider = () => Task.FromResult<string?>(tokenResult))
            .Build();


            _hubConnection.On<Notification[]>("ReceivedNotification", notification =>
            {
                _notifications = notification;
                InvokeAsync(StateHasChanged);
            });

            await _hubConnection.StartAsync();
        }
        private async Task LogToConsole(string message)
        {
            await js.InvokeVoidAsync("blazorConsoleLog", message);
        }

        public async ValueTask DisposeAsync()
        {
            if (_hubConnection is not null)
            {
                await _hubConnection.DisposeAsync();
            }
        }
    }

























































































</main>
