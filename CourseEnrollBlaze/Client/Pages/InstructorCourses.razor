@page "/instructor-courses"  
@inject HttpClient httpClient
@inject AuthenticationStateProvider authStateProvider
@inject ISweetAlertService SweetAlert
@attribute [Authorize(Roles = "Instructor")]
@inject HttpClient httpClient
@inject AuthenticationStateProvider authStateProvider
@inject ISweetAlertService SweetAlert
@inject IJSRuntime js

@code {
    private Course[] myCourses = Array.Empty<Course>();
    [Parameter]
    public Course course { get; set; } = new Course();

    private async Task handleSubmit()
    {
        try
        {
            var customAuthStateProvider = (CustomAuthenticationState)authStateProvider;
            var authState = await customAuthStateProvider.GetAuthenticationStateAsync();
            if (!authState.User.Identity.IsAuthenticated)
            {
                return;
            }

            var tokenResult = await customAuthStateProvider.GetTokenAsync();
            if (tokenResult == null)
            {
                return;
            }

            httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", tokenResult);

            var userId = authState.User.FindFirst(ClaimTypes.NameIdentifier)?.Value;
            if (string.IsNullOrEmpty(userId))
            {
                return;
            }

            course.InstructorId = Guid.Parse(userId);
            var isNewCourse = course.Id.Equals(Guid.Empty);
            var result = isNewCourse ? await httpClient.PostAsJsonAsync("/api/Course", course) : await httpClient.PutAsJsonAsync($"/api/Course/{course.Id}", course);

            if (result.IsSuccessStatusCode)
            {
                var successMessage = isNewCourse ? "You have successfully created a new course." : "You have successfully updated the course.";
                await SweetAlert.ShowAlert("Operation Successful", successMessage, SweetAlertIcon.Success);
                course = new Course();
                await LoadAvailableCoursesAsync();
            }
            else
            {
                var failureMessage = isNewCourse ? "There was an error while creating the course. Please try again later." : "There was an error while updating the course. Please try again later.";
                await SweetAlert.ShowAlert("Operation Failed", failureMessage, SweetAlertIcon.Error);
            }
        }
        catch (Exception ex)
        {
            await SweetAlert.ShowAlert("Error", "An error occurred while processing your request. Please try again later. " + ex.Message, SweetAlertIcon.Error);
        }
    }


    protected override async Task OnInitializedAsync()
    {
        await LoadAvailableCoursesAsync();
    }

    private async Task LoadAvailableCoursesAsync()
    {
        var customAuthStateProvider = (CustomAuthenticationState)authStateProvider;
        var token = await customAuthStateProvider.GetTokenAsync();
        var session = await customAuthStateProvider.GetAuthenticationStateAsync();

        if (!string.IsNullOrWhiteSpace(token))
        {
            var userId = session.User.FindFirst(ClaimTypes.NameIdentifier)?.Value;
            httpClient.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("bearer", token);
            var response = await httpClient.GetFromJsonAsync<Course[]>($"/api/course/instructor/{userId}");

            if (response != null)
            {
                myCourses = response;
            }
            else
            {
                // Handle error
            }
        }
        else
        {
            // Handle authentication error
        }
    }

    private async Task Delete(Guid courseId)
    {

        var confirmed = await SweetAlert.ShowConfirmation("Confirmation", "Are you sure you want to delete this course?");
        if (!confirmed)
        {
            return;
        }
        var customAuthStateProvider = (CustomAuthenticationState)authStateProvider;
        var token = await customAuthStateProvider.GetTokenAsync();
        var session = await customAuthStateProvider.GetAuthenticationStateAsync();

        var tokenResult = await customAuthStateProvider.GetTokenAsync();
        if (tokenResult == null)
        {
            return;
        }

        httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", tokenResult);

        var result = await httpClient.DeleteAsync($"/api/Course/{courseId}");

        if (result.IsSuccessStatusCode)
        {
            await SweetAlert.ShowAlert("Deletion Successful", "You have successfully deleted the course.", SweetAlertIcon.Success);
            await LoadAvailableCoursesAsync();
        }
        else
        {
            await SweetAlert.ShowAlert("Deletion Failed", "There was an error while deleting the course. Please try again later.", SweetAlertIcon.Error);


        }
    }

    private string GetFormattedDate(DateTime date)
    {
        return date.ToString("yyyy-MM-dd"); // Customize date format as needed
    }

    private void OpenEditModel(Course c)
    {
        course = c;
    }
}
<div class="col-md-12 mb-lg-0 mb-4">
    <div class="card mt-4">
        <div class="card-header pb-0 p-3">
            <div class="row">
                <div class="col-6 d-flex align-items-center">
                    <h6 class="mb-0">Courses</h6>
                </div>
                <div class="col-6 text-end">
                    <a class="btn bg-gradient-dark mb-0" data-bs-toggle="modal" data-bs-target="#exampleModal" @onclick="() => OpenEditModel(new Course())"><i class="material-icons text-sm">add</i>&nbsp;&nbsp;Add New Course</a>
                </div>
            </div>
        </div>
        <div class="card-body p-3">
            <ul class="list-group">
                @foreach (var course in myCourses)
                {
                    <li class="list-group-item border-0 d-flex p-4 mb-2 bg-gray-100 border-radius-lg">
                        <div class="d-flex flex-column">
                            <h6 class="mb-3 text-sm">@course.Name</h6>
                            <span class="mb-2 text-xs">Description: <span class="text-dark font-weight-bold ms-sm-2">@course.Description</span></span>
                            <span class="mb-2 text-xs">Start Date: <span class="text-dark ms-sm-2 font-weight-bold">@GetFormattedDate(course.StartDate)</span></span>
                            <span class="mb-2 text-xs">End Date: <span class="text-dark ms-sm-2 font-weight-bold">@GetFormattedDate(course.EndDate)</span></span>
                            <span class="text-xs">Slots Remaining: <span class="text-dark ms-sm-2 font-weight-bold">@course.MaxStudents</span></span>
                        </div>
                        <div class="ms-auto text-end">
                            <button @onclick="() => OpenEditModel(course)" class="btn btn-icon btn-3 btn-info btn-lg" type="button" data-bs-toggle="modal" data-bs-target="#exampleModal">
                                <span class="btn-inner--icon"><i class="material-icons">edit</i></span>
                            </button>
                            <button @onclick="() => Delete(course.Id)" class="btn btn-icon btn-3 btn-danger btn-lg" type="button">
                                <span class="btn-inner--icon"><i class="material-icons">delete</i></span>
                            </button>
                        </div>
                    </li>
                }
                @if (myCourses == null)
                {
                    <li class="list-group-item border-0 d-flex p-4 mb-2 bg-gray-100 border-radius-lg">
                        <div class="d-flex px-2 py-1">

                            <div class="d-flex flex-column justify-content-center align-items-center w-100">
                                <h6 class="mb-0 text-sm">Loading...</h6>
                            </div>
                        </div>
                    </li>
                }
                @if (myCourses?.Length == 0)
                {
                    <li class="list-group-item border-0 d-flex p-4 mb-2 bg-gray-100 border-radius-lg">
                        <div class="d-flex px-2 py-1">

                            <div class="d-flex flex-column justify-content-center align-items-center w-100">
                                <h6 class="mb-0 text-sm">No courses created yet</h6>
                            </div>
                        </div>
                    </li>
                }
            </ul>
        </div>
    </div>
</div>
<div class="modal fade" id="exampleModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <EditForm Model="@course" OnValidSubmit="handleSubmit">
                <div class="modal-header">
                    <h5 class="modal-title font-weight-normal" id="exampleModalLabel">
                        @(course.Id.Equals(Guid.Empty) ? "New Course" : "Edit Course")
                    </h5><button type="button" class="btn-close text-dark" data-bs-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <DataAnnotationsValidator />

                    <div class="input-group input-group-outline mb-3">
                        <label class="static-label" for="name">Name:</label>
                        <InputText  onfocus="focused(this)" onfocusout="defocused(this)"  id="name" @bind-Value="course.Name" class="form-control" />
                        <span class="font-weight-bold mt-1 text-xs w-100">
                            <ValidationMessage For="@(() => course.Name)" />
                        </span>
                    </div>

                    <div class="input-group input-group-outline mb-3">
                        <label class="static-label" for="description">Description:</label>
                        <InputText  onfocus="focused(this)" onfocusout="defocused(this)"  id="description" @bind-Value="course.Description" class="form-control" />
                        <span class="font-weight-bold mt-1 text-xs w-100">
                            <ValidationMessage For="@(() => course.Description)" />
                        </span>
                    </div>

                    <div class="input-group input-group-outline mb-3">
                        <label class="static-label" for="maxStudents">Maximum Students:</label>
                        <InputNumber id="maxStudents" @bind-Value="course.MaxStudents" class="form-control" onfocus="focused(this)" onfocusout="defocused(this)" />
                        <span class="font-weight-bold mt-1 text-xs w-100">
                            <ValidationMessage For="@(() => course.MaxStudents)" />
                        </span>
                    </div>

                    <div class="input-group input-group-outline mb-3 focus is-focused">
                        <label class="static-label" for="startDate">Start Date:</label>
                        <InputDate id="startDate" @bind-Value="course.StartDate" class="form-control"/>
                        <span class="font-weight-bold mt-1 text-xs w-100">
                            <ValidationMessage For="@(() => course.StartDate)" />
                        </span>
                    </div>

                    <div class="input-group input-group-outline mb-3 ">
                        <label class="static-label" for="endDate">End Date:</label>
                        <InputDate id="endDate" TValue="DateTime" @bind-Value="course.EndDate" class="form-control"/>
                        <span class="font-weight-bold mt-1 text-xs w-100">
                            <ValidationMessage For="@(() => course.EndDate)" />
                        </span>
                        @if (!course.IsValid)
                        {
                            <span class="font-weight-bold mt-1 text-xs w-100 text-danger">@course.IsValidErrorMessage</span>
                        }
                    </div>
                    <span class="font-weight-bold mt-1 text-xs w-100">
                        <ValidationSummary />
                    </span>

                </div>
                <div class="modal-footer">
                    <button type="button" id="CloseModal" class="btn bg-gradient-secondary" data-bs-dismiss="modal">Close</button>
                    <button type="submit" class="btn bg-gradient-primary">Save changes</button>
                </div>
            </EditForm>
        </div>
    </div>
</div>
